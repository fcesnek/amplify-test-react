type Gym @model {
  id: ID!
  name: String!
  location: String!
  studio: [Studio] @connection(keyName: "byGym", fields: ["id"])
}

type Studio @model @key(name: "byGym", fields: ["gymID"]) {
  id: ID!
  title: String!
  gymID: ID!
  gym: Gym @connection(fields: ["gymID"])
  devices: [Device] @connection(keyName: "byStudio", fields: ["id"])
  sessions: [Session] @connection(keyName: "byStudio", fields: ["id"])
}

type Device @model @key(name: "byStudio", fields: ["studioID"]) {
  id: ID!
  studioID: ID!
  studio: Studio @connection(fields: ["studioID"])
  zoomMeet: ZoomMeet @connection
}

type Session
  @model
  @key(name: "byStudio", fields: ["studioID"]) {
  id: ID!
  studioID: ID!
  studio: Studio @connection(fields: ["studioID"])
  coachID: ID!
  coach: User @connection(fields: ["coachID"])
  clientID: ID!
  client: User @connection(fields: ["clientID"])
  zoomMeetID: ID!
  zoomMeet: ZoomMeet @connection(fields: ["zoomMeetID"])
  start_time: AWSDateTime!
  end_time: AWSDateTime!
}

type User @model {
  id: ID!
  username: String!
  email: String!
  userGroup: String!
  intakeFormDetails: IntakeFormDetails
}

type IntakeFormDetails {
  personalDetails: PersonalDetails
  exerciseHistory: ExerciseHistory
  medicalHistory: MedicalHistory
  behavioralQuestions: BehavioralQuestions
  trainerPreferences: TrainerPreferences
}

type TrainerPreferences {
  language: String
  trainerSex: String
  coachPersonality: String
}

type BehavioralQuestions {
  barrierToExercise: String
  confidenceToOvercomeBarrier: Rating
  friendAndFamilySupport: Rating
  exerciseImportance: Rating
  motivation: Rating
  resultsExpectation: Rating
}

type MedicalHistory {
  hasMedicalConditions: Boolean
  toldToLimitActivity: ActivityLimit
  injuries: Boolean
  surgeries: Boolean
  chronicDisease: Boolean
  medications: Boolean
}

type ActivityLimit {
  hasBeenToldToLimitActivity: Boolean
  reasonForActivityLimit: String
}

type ExerciseHistory {
  exerciseImportance: Rating
  weeklyExercise: Rating
  ageOfMostConsistency: Int
  athleticismLevel: Rating
  exercisePrograms: [String]
  wantedExerciseAchievements: [String]
  confidenceToAchieveGoals: Rating
}

enum Rating {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

type PersonalDetails {
  fullName: String
  dateOfBirth: String
  height: String
  weight: Int
  sex: String
  phoneNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
}

type ZoomMeet @model {
  id: ID!
  start_url: String!
  topic: String
  join_url: String!
  password: String!
  start_time: AWSDateTime
  duration: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Mutation {
  createZoomMeetApi(topic: String, start_time: AWSDateTime, duration: Int): ZoomMeet @function(name: "createZoomMeetApiCall-${env}")
}
